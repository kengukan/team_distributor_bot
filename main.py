import os
import logging
import sqlite3
import random
from flask import Flask
from threading import Thread
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, 
    CallbackContext, ConversationHandler
)

# üî• Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Webview –∏ UptimeRobot
app = Flask('')

@app.route('/')
def home():
    return """
    <html>
        <head>
            <title>ü§ñ Team Distributor Bot</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    text-align: center;
                    padding: 50px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                }
                .container {
                    background: rgba(255,255,255,0.1);
                    padding: 30px;
                    border-radius: 15px;
                    backdrop-filter: blur(10px);
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ Team Distributor Bot</h1>
                <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</p>
                <p>–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start</p>
                <p>üü¢ –°—Ç–∞—Ç—É—Å: <strong>–ê–∫—Ç–∏–≤–µ–Ω</strong></p>
                <p>‚è∞ 24/7 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω</p>
            </div>
        </body>
    </html>
    """

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    t = Thread(target=run_flask)
    t.daemon = True
    t.start()
    print("üåê Web-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è Replit Webview")

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –î–û –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
keep_alive()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô USER_ID (—É–∑–Ω–∞–π—Ç–µ —á–µ—Ä–µ–∑ @userinfobot)
ADMIN_IDS = [641655716]

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FIO, CONFIRM = range(2)

class TeamManager:
    def __init__(self, db_path='teams.db'):
        self.db_path = db_path
        self.num_teams = 12
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                fio TEXT NOT NULL,
                team_number INTEGER NOT NULL,
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_user_info(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            'SELECT fio, team_number FROM users WHERE user_id = ?', 
            (user_id,)
        )
        result = cursor.fetchone()
        conn.close()
        return result if result else None
    
    def assign_random_team(self, user_id, fio):
        """–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # üîÑ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing = self.get_user_info(user_id)
        if existing:
            conn.close()
            print(f"üîÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ {existing[1]}")
            return existing[1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        cursor.execute('''
            SELECT team_number, COUNT(*) as count 
            FROM users 
            GROUP BY team_number 
            ORDER BY team_number
        ''')
        
        team_counts = {i: 0 for i in range(1, self.num_teams + 1)}
        for team, count in cursor.fetchall():
            team_counts[team] = count
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        min_count = min(team_counts.values())
        available_teams = [team for team, count in team_counts.items() if count == min_count]
        
        # üé≤ –°–õ–£–ß–ê–ô–ù–û–ï —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        assigned_team = random.choice(available_teams)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        cursor.execute('''
            INSERT INTO users (user_id, fio, team_number)
            VALUES (?, ?, ?)
        ''', (user_id, fio, assigned_team))
        
        conn.commit()
        conn.close()
        print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fio} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É {assigned_team}")
        return assigned_team
    
    def get_teams_with_members(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT team_number, fio 
            FROM users 
            ORDER BY team_number, registered_at
        ''')
        
        teams = {}
        for team_number, fio in cursor.fetchall():
            if team_number not in teams:
                teams[team_number] = []
            teams[team_number].append(fio)
        
        conn.close()
        return teams
    
    def get_team_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT team_number, COUNT(*) as count 
            FROM users 
            GROUP BY team_number 
            ORDER BY team_number
        ''')
        
        stats = cursor.fetchall()
        conn.close()
        return stats
    
    def get_total_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM users')
        count = cursor.fetchone()[0]
        conn.close()
        
        return count

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
team_manager = TeamManager()

# üéØ –î–í–ï –ü–û–°–¢–û–Ø–ù–ù–´–ï –ö–ù–û–ü–ö–ò –í–ù–ò–ó–£
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["üéØ –£–∑–Ω–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
    ],
    resize_keyboard=True,
    persistent=True  # –ö–Ω–æ–ø–∫–∏ –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã
)

def start(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.message.from_user
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–∑–≤–∞–ª /start")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ
    existing_user = team_manager.get_user_info(user.id)
    
    if existing_user:
        fio, team_number = existing_user
        update.message.reply_text(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {fio}!\n\n"
            f"‚úÖ –í—ã –≤ –∫–æ–º–∞–Ω–¥–µ ‚Ññ{team_number}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=MAIN_KEYBOARD
        )
        return ConversationHandler.END
    else:
        update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω—É–ª–µ–≤—É—é —Å–µ—Å—Å–∏—é!\n\n"
            "üéØ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É!",
            reply_markup=MAIN_KEYBOARD
        )
        return FIO

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    user = update.message.from_user
    button_text = update.message.text
    
    if button_text == "üéØ –£–∑–Ω–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É":
        print(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª '–£–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ
        existing_user = team_manager.get_user_info(user.id)
        
        if existing_user:
            fio, team_number = existing_user
            update.message.reply_text(
                f"üëã {fio}!\n\n"
                f"‚úÖ –í—ã –≤ –∫–æ–º–∞–Ω–¥–µ ‚Ññ{team_number}\n\n"
                "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list",
                reply_markup=MAIN_KEYBOARD
            )
            return ConversationHandler.END
        else:
            update.message.reply_text(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
            )
            return FIO
    
    elif button_text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'")
        return show_stats(update, context)

def get_fio(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    fio = update.message.text.strip()
    print(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –≤–≤–µ–ª –§–ò–û: {fio}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    if len(fio) < 5 or len(fio.split()) < 2:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )
        return FIO
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['fio'] = fio
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    update.message.reply_text(
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–§–ò–û: {fio}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ"], ["‚ùå –ù–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CONFIRM

def confirm_fio(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –§–ò–û –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    choice = update.message.text
    user_id = update.message.from_user.id
    
    if choice == "‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ":
        fio = context.user_data['fio']
        
        # üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ (—Å–ª—É—á–∞–π–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π)
        team_number = team_manager.assign_random_team(user_id, fio)
        
        update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {fio}!\n\n"
            f"üèÜ –í—ã –≤ –∫–æ–º–∞–Ω–¥–µ ‚Ññ{team_number}!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=MAIN_KEYBOARD
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        return ConversationHandler.END
    
    else:
        update.message.reply_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∑–∞–Ω–æ–≤–æ:\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            reply_markup=MAIN_KEYBOARD
        )
        return FIO

def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=MAIN_KEYBOARD
    )
    context.user_data.clear()
    return ConversationHandler.END

def show_teams_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
    teams = team_manager.get_teams_with_members()
    
    if not teams:
        update.message.reply_text(
            "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç.",
            reply_markup=MAIN_KEYBOARD
        )
        return
    
    response = "üìã –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î –ò –£–ß–ê–°–¢–ù–ò–ö–û–í:\n\n"
    
    for team_number in sorted(teams.keys()):
        members = teams[team_number]
        response += f"üèÜ –ö–û–ú–ê–ù–î–ê {team_number} ({len(members)} —á–µ–ª.):\n"
        
        for i, member in enumerate(members, 1):
            response += f"   {i}. {member}\n"
        
        response += "\n"
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            update.message.reply_text(part, reply_markup=MAIN_KEYBOARD)
    else:
        update.message.reply_text(response, reply_markup=MAIN_KEYBOARD)

def show_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    stats = team_manager.get_team_stats()
    total_users = team_manager.get_total_users()
    
    if not stats:
        update.message.reply_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=MAIN_KEYBOARD
        )
        return
    
    response = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:\n\n"
    
    for team, count in stats:
        response += f"–ö–æ–º–∞–Ω–¥–∞ {team}: {count} —á–µ–ª.\n"
    
    response += f"\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}"
    response += f"\n–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {len(stats)}"
    response += f"\n–°—Ä–µ–¥–Ω–µ–µ –≤ –∫–æ–º–∞–Ω–¥–µ: {total_users/len(stats):.1f} —á–µ–ª."
    
    update.message.reply_text(response, reply_markup=MAIN_KEYBOARD)

def restart_bot(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        update.message.reply_text(
            "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
            reply_markup=MAIN_KEYBOARD
        )
        return
    
    update.message.reply_text(
        "üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ 'Run' –≤ Replit.",
        reply_markup=MAIN_KEYBOARD
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Secrets
    BOT_TOKEN = os.environ.get('BOT_TOKEN')
    
    if not BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Secret –≤ Replit: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: {team_manager.num_teams}")
    print(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
    
    try:
        updater = Updater(BOT_TOKEN, use_context=True)
        dispatcher = updater.dispatcher
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', start),
                MessageHandler(Filters.regex('^(üéØ –£–∑–Ω–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$'), button_handler)
            ],
            states={
                FIO: [MessageHandler(Filters.text & ~Filters.command, get_fio)],
                CONFIRM: [MessageHandler(Filters.text & ~Filters.command, confirm_fio)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(conv_handler)
        dispatcher.add_handler(CommandHandler('list', show_teams_list))
        dispatcher.add_handler(CommandHandler('stats', show_stats))
        dispatcher.add_handler(CommandHandler('restart', restart_bot))
        
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üéØ –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞")
        print("üåê Web-—Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω - Webview –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
        
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ repl –∫–Ω–æ–ø–∫–æ–π 'Run'")

if __name__ == '__main__':
    main()
