import os
import logging
import sqlite3
import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, 
    CallbackContext, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FIO, CONFIRM = range(2)

class TeamManager:
    def __init__(self, db_path='teams.db'):
        self.db_path = db_path
        self.num_teams = 12  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                fio TEXT NOT NULL,
                team_number INTEGER NOT NULL,
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def get_user_info(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            'SELECT fio, team_number FROM users WHERE user_id = ?', 
            (user_id,)
        )
        result = cursor.fetchone()
        conn.close()
        
        return result if result else None
    
    def assign_random_team(self, user_id, fio):
        """–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing = self.get_user_info(user_id)
        if existing:
            conn.close()
            return existing[1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        cursor.execute('''
            SELECT team_number, COUNT(*) as count 
            FROM users 
            GROUP BY team_number 
            ORDER BY team_number
        ''')
        
        team_counts = {i: 0 for i in range(1, self.num_teams + 1)}
        for team, count in cursor.fetchall():
            team_counts[team] = count
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        min_count = min(team_counts.values())
        available_teams = [team for team, count in team_counts.items() if count == min_count]
        
        # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        assigned_team = random.choice(available_teams)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        cursor.execute('''
            INSERT INTO users (user_id, fio, team_number)
            VALUES (?, ?, ?)
        ''', (user_id, fio, assigned_team))
        
        conn.commit()
        conn.close()
        return assigned_team
    
    def get_teams_with_members(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT team_number, fio 
            FROM users 
            ORDER BY team_number, registered_at
        ''')
        
        teams = {}
        for team_number, fio in cursor.fetchall():
            if team_number not in teams:
                teams[team_number] = []
            teams[team_number].append(fio)
        
        conn.close()
        return teams
    
    def get_team_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT team_number, COUNT(*) as count 
            FROM users 
            GROUP BY team_number 
            ORDER BY team_number
        ''')
        
        stats = cursor.fetchall()
        conn.close()
        return stats
    
    def get_total_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM users')
        count = cursor.fetchone()[0]
        conn.close()
        
        return count

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
team_manager = TeamManager()

def start(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ
    existing_user = team_manager.get_user_info(user.id)
    
    if existing_user:
        fio, team_number = existing_user
        update.message.reply_text(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {fio}!\n\n"
            f"–í—ã —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Ññ{team_number}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
        )
        return ConversationHandler.END
    else:
        update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º!\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )
        return FIO

def get_fio(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    fio = update.message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    if len(fio) < 5 or len(fio.split()) < 2:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )
        return FIO
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['fio'] = fio
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    update.message.reply_text(
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–§–ò–û: {fio}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ"], ["‚ùå –ù–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CONFIRM

def confirm_fio(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –§–ò–û –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    choice = update.message.text
    
    if choice == "‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ":
        fio = context.user_data['fio']
        user_id = update.message.from_user.id
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ
        team_number = team_manager.assign_random_team(user_id, fio)
        
        update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {fio}!\n\n"
            f"üèÜ –í—ã –≤ –∫–æ–º–∞–Ω–¥–µ ‚Ññ{team_number}!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        return ConversationHandler.END
    
    else:
        update.message.reply_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∑–∞–Ω–æ–≤–æ:\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )
        return FIO

def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    context.user_data.clear()
    return ConversationHandler.END

def show_teams_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
    teams = team_manager.get_teams_with_members()
    
    if not teams:
        update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç.")
        return
    
    response = "üìã –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î –ò –£–ß–ê–°–¢–ù–ò–ö–û–í:\n\n"
    
    for team_number in sorted(teams.keys()):
        members = teams[team_number]
        response += f"üèÜ –ö–û–ú–ê–ù–î–ê {team_number} ({len(members)} —á–µ–ª.):\n"
        
        for i, member in enumerate(members, 1):
            response += f"   {i}. {member}\n"
        
        response += "\n"
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            update.message.reply_text(part)
    else:
        update.message.reply_text(response)

def show_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    stats = team_manager.get_team_stats()
    total_users = team_manager.get_total_users()
    
    if not stats:
        update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    response = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:\n\n"
    
    for team, count in stats:
        response += f"–ö–æ–º–∞–Ω–¥–∞ {team}: {count} —á–µ–ª.\n"
    
    response += f"\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}"
    
    update.message.reply_text(response)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    updater = Updater(BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            FIO: [MessageHandler(Filters.text & ~Filters.command, get_fio)],
            CONFIRM: [MessageHandler(Filters.text & ~Filters.command, confirm_fio)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(CommandHandler('list', show_teams_list))
    dispatcher.add_handler(CommandHandler('stats', show_stats))
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π –§–ò–û –∏ —Å–ª—É—á–∞–π–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º!")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()